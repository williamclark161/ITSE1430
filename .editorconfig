# EditorConfig is awesome: http://EditorConfig.org
# VS implementat: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
end_of_line = crlf
indent_style = space
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.cs,*.csx,*.vb,*.vbx]
indent_size = 4

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 4

# JSON files
[*.json]
indent_size = 2

# Dotnet code style settings:
[*.{cs, vb}]
# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_event = false:warning

# Use language keywords instead of framework type names for type references but not members
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = false:warning

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion

# CSharp code style settings:
[*.cs]
# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_operators = false:suggestion

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Preferences
csharp_prefer_simple_default_expression = true:suggestion
csharp_prefer_braces = false:none

# Formatting
dotnet_sort_system_directives_first = true:warning

csharp_new_line_before_open_brace = control_blocks, events, local_functions, methods, object_collection, properties, types:suggestion
csharp_new_line_before_else = false:suggestion
csharp_new_line_before_catch = false:suggestion
csharp_new_line_before_finally = false:suggestion
csharp_new_line_before_members_in_object_initializers = false:none
csharp_new_line_before_members_in_anonymous_types = false:none
csharp_new_line_within_query_expression_clauses = false:warning

# Indenting
csharp_indent_case_contents = true:none
csharp_indent_switch_labels = true:suggestion
csharp_indent_labels = one_less:warning

# Spacing
csharp_space_after_cast = false:suggestion
csharp_space_after_keywords_in_control_flow_statements = true:warning
csharp_space_between_method_declaration_parameter_list_parentheses = true:warning
csharp_space_between_method_call_parameter_list_parentheses = false:suggestion
csharp_space_between_parentheses = false:suggestion

# Wrapping
csharp_preserve_single_line_statements = false:suggestion
csharp_preserve_single_line_blocks = true:suggestion

###
# Naming (most specific to least ordering required)
# dotnet_naming_rule.{title}.symbols = dotnet_naming_symbols
# dotnet_naming_rule.{title}.style = dotnet_naming_style
# dotnet_naming_rule.{title}.rule.severity = none | suggestion | warning | error
#
# dotnet_naming_symbols.{title}.applicable_kinds = * | class, struct, interface, enum, property, method, field, event, namespace, delegate, type_parameter
# dotnet_naming_symbols.{title}.applicable_accessibilities = * | public, internal, private, protected, protected_internal
# dotnet_naming_symbols.{title}.required_modifiers = abstract, async, const, readonly, static, must_inherit?
#
# dotnet_naming_style.{title}.capitalization = pascal_case | camel_case | first_word_upper | all_upper | all_lower
# dotnet_naming_style.{title}.required_prefix = ...
# dotnet_naming_style.{title}.required_suffix = ...
# dotnet_naming_style.{title}.word_separator = ... 
###

# Private or internal static fields start with s_
dotnet_naming_rule.private_static_fields_start_with_s_underscore.symbols = private_static_field
dotnet_naming_rule.private_static_fields_start_with_s_underscore.style = start_with_s_underscore
dotnet_naming_rule.private_static_fields_start_with_s_underscore.severity = warning

# Private or internal fields start with _
dotnet_naming_rule.private_fields_start_with_s_underscore.symbols = private_field
dotnet_naming_rule.private_fields_start_with_s_underscore.style = start_with_underscore
dotnet_naming_rule.private_fields_start_with_s_underscore.severity = warning

# Async methods end with Async
dotnet_naming_rule.async_methods_end_with_async.symbols = async_methods
dotnet_naming_rule.async_methods_end_with_async.style = end_with_async
dotnet_naming_rule.async_methods_end_with_async.severity = warning

# Interfaces begin with I
dotnet_naming_rule.interfaces_start_with_i.symbols = interface
dotnet_naming_rule.interfaces_start_with_i.style = start_with_i
dotnet_naming_rule.interfaces_start_with_i.severity = error

##
# Symbols
##
dotnet_naming_symbols.async_methods.applicable_kinds = method
dotnet_naming_symbols.async_methods.applicable_accessibilities = *
dotnet_naming_symbols.async_methods.required_modifiers = async

dotnet_naming_symbols.interface.applicable_kinds = interface

dotnet_naming_symbols.private_static_field.applicable_kinds = field
dotnet_naming_symbols.private_static_field.applicable_accessibilities = private
dotnet_naming_symbols.private_static_field.required_modifiers = static

dotnet_naming_symbols.private_field.applicable_kinds = field
dotnet_naming_symbols.private_field.applicable_accessibilities = private

##
# Styles
##
dotnet_naming_style.end_with_async.capitalization = pascal_case
dotnet_naming_style.end_with_async.required_suffix = Async

dotnet_naming_style.start_with_i.capitalization = pascal_case
dotnet_naming_style.start_with_i.required_prefix = I

dotnet_naming_style.start_with_s_underscore.capitalization = camel_case
dotnet_naming_style.start_with_s_underscore.required_prefix = s_

dotnet_naming_style.start_with_underscore.capitalization = camel_case
dotnet_naming_style.start_with_underscore.required_prefix = _

